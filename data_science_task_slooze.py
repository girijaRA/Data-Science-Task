# -*- coding: utf-8 -*-
"""DATA SCIENCE -TASK SLOOZE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QPkVgO-Pbs4oGDPP1l0bXSioJAM6gzTk
"""

pip install pandas numpy matplotlib seaborn scikit-learn

from google.colab import files
files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("retail_store_inventory.csv")

df['Date'] = pd.to_datetime(df['Date'])

df.head()

""" **FEATURE
 ENGINEERING**
"""

df['Total Sales'] = df['Units Sold'] * df['Price']

df['Month'] = df['Date'].dt.month
df['Year'] = df['Date'].dt.year

"""**1.DEMAND FORECASTING**

**Demand Forecasting (Time-Series by Product)**
"""

product_ts = df[df['Product ID'] == 'P0001'].groupby('Date')['Units Sold'].sum()

product_ts.plot(figsize=(12,5), title='Demand Trend for Product P0001')
plt.ylabel("Units Sold")
plt.xlabel("Date")
plt.show()

"""**ARIMA Time Series Forecasting**"""

from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt
import pandas as pd

df['Date'] = pd.to_datetime(df['Date'])
product_ts = df[df['Product ID'] == 'P0001'].groupby('Date')['Units Sold'].sum().asfreq('D').fillna(0)

model = ARIMA(product_ts, order=(2,1,2))
fitted_model = model.fit()
forecast = fitted_model.forecast(steps=30)

plt.figure(figsize=(12, 5))
plt.plot(product_ts, label='Historical Demand')
plt.plot(forecast, label='ARIMA Forecast (30 days)', color='red')
plt.title('ARIMA Demand Forecast for Product P0001')
plt.xlabel('Date')
plt.ylabel('Units Sold')
plt.legend()
plt.tight_layout()
plt.show()

"""**Machine Learning Regression Forecasting (Random Forest)**"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

df_ml = pd.DataFrame({'y': product_ts})
for lag in range(1, 8):
    df_ml[f'lag_{lag}'] = df_ml['y'].shift(lag)

df_ml.dropna(inplace=True)
X = df_ml.drop(columns='y')
y = df_ml['y']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)

plt.figure(figsize=(12,5))
plt.plot(y_test.index, y_test.values, label='Actual')
plt.plot(y_test.index, y_pred, label='Random Forest Forecast', linestyle='--')
plt.title('Random Forest Demand Forecast for Product P0001')
plt.xlabel('Date')
plt.ylabel('Units Sold')
plt.legend()
plt.tight_layout()
plt.show()

print("MAE:", mean_absolute_error(y_test, y_pred))

"""**2.ABC ANALYSIS**"""

abc_df = df.groupby('Product ID')['Total Sales'].sum().reset_index()
abc_df = abc_df.sort_values(by='Total Sales', ascending=False)
abc_df['Cumulative %'] = abc_df['Total Sales'].cumsum() / abc_df['Total Sales'].sum()

def classify(cum_pct):
    if cum_pct <= 0.7:
        return 'A'
    elif cum_pct <= 0.9:
        return 'B'
    else:
        return 'C'

abc_df['Class'] = abc_df['Cumulative %'].apply(classify)
abc_df.head()

"""**3.ECONOMIC ORDER QUANTITY(EQR) ANALYSIS**"""

# EOQ Formula: sqrt((2DS)/H)
# D = demand/year, S = ordering cost, H = holding cost per unit/year

S = 50
product_demand = df.groupby('Product ID')['Units Sold'].sum().reset_index()
avg_price = df.groupby('Product ID')['Price'].mean().reset_index()

eoq_df = pd.merge(product_demand, avg_price, on='Product ID')
eoq_df['H'] = eoq_df['Price'] *
eoq_df['EOQ'] = np.sqrt((2 * eoq_df['Units Sold'] * S) / eoq_df['H'])
eoq_df.head()

"""**4.REORDER POINT ANALYSIS**"""

lead_time_days = 7

daily_demand = df.groupby(['Product ID', 'Date'])['Units Sold'].sum().groupby('Product ID').mean().reset_index()
daily_demand.rename(columns={'Units Sold': 'Avg Daily Demand'}, inplace=True)
daily_demand['Reorder Point'] = daily_demand['Avg Daily Demand'] * lead_time_days
daily_demand.head()

"""**5.LEAD TIME ANALYSIS**"""

lead_analysis = df.groupby('Product ID').agg({
    'Units Ordered': 'sum',
    'Units Sold': 'sum',
    'Inventory Level': 'mean'
}).reset_index()

lead_analysis['Turnover Rate'] = lead_analysis['Units Sold'] / lead_analysis['Inventory Level']
lead_analysis.head()

"""**OTHER ASPECTS**

**Sales Trend by Category/Region**
"""

sales_trend = df.groupby(['Date', 'Category'])['Total Sales'].sum().reset_index()
pivot = sales_trend.pivot(index='Date', columns='Category', values='Total Sales')
pivot.plot(figsize=(14,6), title="Sales Trend by Category")
plt.ylabel("Total Sales")
plt.show()

"""**Monthly Sales Trend**"""

df['Date'] = pd.to_datetime(df['Date'])
df['Month'] = df['Date'].dt.to_period('M')
df['Total Sales'] = df['Units Sold'] * df['Price']

monthly_sales = df.groupby('Month')['Total Sales'].sum()
monthly_sales.plot(marker='o', figsize=(12,5), title='Monthly Sales Trend')

"""**Supplier Efficiency (Proxy)**"""

supplier_eff = df.groupby('Product ID')[['Units Sold', 'Units Ordered']].sum()
supplier_eff['Efficiency Ratio'] = supplier_eff['Units Sold'] / supplier_eff['Units Ordered']
print(supplier_eff.sort_values(by='Efficiency Ratio', ascending=False).head())

"""**bold text**

**Top 10 Products by Total Sales**
"""

top_products = df.groupby('Product ID')['Total Sales'].sum().sort_values(ascending=False).head(10)

sns.barplot(x=top_products.values, y=top_products.index, palette="viridis")
plt.title("Top 10 Products by Total Sales")
plt.xlabel("Total Sales")
plt.ylabel("Product ID")
plt.show()

"""**Pie Chart – Category Sales Contribution**"""

category_sales = df.groupby('Category')['Total Sales'].sum()
category_sales.plot.pie(autopct='%1.1f%%', figsize=(8,6), title="Sales Contribution by Category")
plt.ylabel("")
plt.show()

"""**Heatmap – Correlation Matrix**"""

plt.figure(figsize=(10, 8))
corr = df[['Units Sold', 'Units Ordered', 'Inventory Level', 'Price', 'Discount', 'Competitor Pricing', 'Total Sales']].corr()
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

"""**Box Plot – Price Distribution by Category**"""

plt.figure(figsize=(8, 4))
sns.boxplot(data=df, x='Category', y='Price', palette="Set2")
plt.title(" Price Distribution Across Categories")
plt.xticks(rotation=45)
plt.show()

"""**Scatter Plot – Discount vs Units Sold**"""

sns.scatterplot(data=df, x='Discount', y='Units Sold', hue='Category', alpha=0.6)
plt.title("Discount vs Units Sold")
plt.xlabel("Discount (%)")
plt.ylabel("Units Sold")
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""**Histogram – Inventory Level Distribution**"""

df['Inventory Level'].plot(kind='hist', bins=30, edgecolor='black', figsize=(10,5))
plt.title(" Inventory Level Distribution")
plt.xlabel("Inventory Level")
plt.show()

"""**Violin Plot – Competitor Pricing by Category**"""

plt.figure(figsize=(10, 6))
sns.violinplot(data=df, x='Category', y='Competitor Pricing', palette='pastel')
plt.title("Competitor Pricing Distribution by Category")
plt.xticks(rotation=45)
plt.show()

"""**Area Plot – Cumulative Sales Over Time**"""

df['Date'] = pd.to_datetime(df['Date'])
sales_time = df.groupby('Date')['Total Sales'].sum().cumsum()

sales_time.plot(kind='area', figsize=(12,6), alpha=0.5, title="Cumulative Sales Over Time")
plt.ylabel("Cumulative Sales")
plt.show()

"""**COUNT PLOT**"""

plt.figure(figsize=(8,4))
sns.countplot(data=df, x='Category', order=df['Category'].value_counts().index, palette='viridis')
plt.title("Number of Orders per Category")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()